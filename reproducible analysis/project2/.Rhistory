title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Months == 5)
may <- subset(airquality, Month == 5)
points(may, col = "blue", type = t)
points(may, col = "blue")
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, !Month == 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 15)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend(topright, c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(median(airquality$Wind), lty = 2. wth = 2)
abline(median(airquality$Wind), lty = 2, wth = 2)
?abline
abline(median(airquality$Wind), lty = 2, w = 2)
abline(median(airquality$Wind), lty = 2)
abline(v = median(airquality$Wind), lty = 2)
line(v = median(airquality$Wind))
line(median(airquality$Wind))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone. main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone. main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~  Wind | as.factor(Month), airquality, layout = c(5,1))
xyplot(Ozone ~  Wind, airquality, layout = c(5,1))
xyplot(Ozone ~  Wind | Month, airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"))
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color*cut, diamonds, strip = FALSE, pch = 20, xlab = "myxlab",)
xyplot(price ~ carat | color*cut, diamonds, strip = FALSE, pch = 20, xlab = "myxlab", ylab = "myylab", main = "mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
2
pal(1)
pal(seq(0,1,len=6))
colorRampPalette(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(3, 0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.3))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20)
image(volcano, col = pal(20))
image(volcano, col = p1(20))
?pbeta
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1-(2+1)/36
deck
52
4/52
0
12/52
0
2/52
2/51
swirl()
0.8*1.6*0.5
0.64
mypdf
integrate(mypdf, 0, 1.6)
2^0.5
0.997*0.001
0.3*0.999
0.985*0.999
0.985*(1-0.001)
(1-0.985)*0.999
0.997*0.001/(0.997*0.01+0.015*0.999)
(.997*.001)/(.997*.001 + .015*.999)
21/6
expect_dice()
expect_dice(pmf)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
edh
0.5*(edh+edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply
apply(allsam, 1, mean)
mean(array)
mean(smeans)
swirl
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
pnorm(70, mean = 80, sd = 10)
pnorm(0.95, mmean = 1100, sd = 75)
pnorm(0.95, mean = 1100, sd = 75)
?pnorm
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75^0.5/10)
qnorm(0.95, mean = 1100, sd = 75/10)
?binomial
binom.test(3, 5, p=0.5, alternative = "greater")
?pbinom
pbinom(3, 5, 0.5, lower.tail = FALSE)
pnorm(16, mean = 15, sd = 10) - pnorm(14, mean = 15, sd = 10)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
ppois(10, 15)
swirl()
dice_sqr
ex2_fair <- sum(dice_fair * PDF)
ex2_fair <- sum(dice_fair)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_high * dice_sqr) - 3.5^2
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
pbinom(2, 5, 0.8, lower.tail = FALSE)
pbinom(2, 5, 0.8, lower.tail = FALSE)
qnorm(0.1)
0.5
0
qnorm(0.975, mean = 3, sd = 2)
1.96*2 + 3
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(0.75, mean = 1020, sd = 50)
0.53
0.53
ppois(3, 2.5*4)
pbinom(5, 1000, 0.01)
ppois(5, 1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(0.95)
p'+/- qnorm(.975)*sqrt(p'(1-p')/100)
0.6+/- qnorm(.975)*sqrt(0.6'(1-0.6')/100)
0.6+ qnorm(.975)*sqrt(0.6(1-0.6)/100)
0.6
0.6 + c(-1,1)*qnorm(0,975)*sqrt(0.6*0.4/100)
0.6 + c(-1,1)*qnorm(0.975)*sqrt(0.6*0.4/100)
binom.test(60, 100)
binom.test(60, 100)$conf.int
mywald(0.2)
ACCompar(20)
lamb
5/94.32
lamb <- 5/94.32
5/94.32 + c(-1, 1)*qnorm(0.975)*sqrt(5)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)$conf
sessionInfo()
?update
library(swirl)
swirl()
6
dim(InsectSprays)
View(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
?sapply
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coefficients)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spary2 <- relevel(InsectSprays$spray, C)
spary2 <- relevel(InsectSprays$spray, "C")
spary2 <- relevel(InsectSprays$spray, \"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"\C\")
spray2 <- relevel(InsectSprays$spray,\"C"\)
?relevel
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray, spray2)
head(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coefficients[2] - fit$coefficients[3] )/1.6011
(fit$coef[2] - fit$coef[3] )/1.6011
dim(hunger)
948*13
13
948
names(hunger)
fit <- lm(Numeric ~ Year, data = hunger)
summary(fit$coef)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, data = x[hunger$Sex == "Female"])
lmF <- lm(Numeric ~ Year, data = hunger[hunger$Sex == "Female"])
lmF <- lm(Numeric ~ Year)
lmF <- lm(Numeric ~ Year, data = hunger)
lmF <- lm(hunger$Numeric[hunger$Sex == "Female"] ~ hunger$Year[hunger$Sex == "Female"])
lmM <- lm(hunger$Numeric[hunger$Sex == "Male"] ~ hunger$Year[hunger$Sex == "Male"])
lmBoth <- lm(Numeric ~ Year + Sex, data = hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which = 1)
fitno <- lm(x ~ y, out2[-1,])
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sd
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <-
sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, wwhich = 2)
plot(fit, which = 2)
sigma1 <- sqrt(sd(residuals(fitno))/deviance(df.residual(fitno)))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which = 5)
head(mtcars)
fit <- lm(cyl ~ wt, data = mtcars)
summary(fit)$coef
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)$coef
summary(lm(mpg ~ cyl, data = mtcars))$coef
summary(lm(mpg ~ cyl*wt, data = mtcars))
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(lm(y ~ x))
hatvalues(lm(y ~x))
dfbeta(lm(y ~ x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y ~x))
dfbeta(lm(y ~ x))
data(mtcars)
fit1 <- lm(mpg~factor(cyl) + wt, data=mtcars)
fit2 <- update(fit1, mpg~factor(cyl) + wt + wt*factor(cyl))
summary(fit1)
summary(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
library(swirl)
swirl()
?plot
x <- c(2:10)
x
y <- c(1,2,2,3,4,2,2,2,1)
plot(x,y)
?plot
plot
polygon(x,y)
?polygon
polygon(x,y, ylim(0,5))
windows()
?par
polygon(x,y)
xlab("Score")
polygon(x,y, xlab = "Score")
polygon(x,y, xlab = "Score", ylab = "Frequency")
windows()
polygon(x,y, xlab = "Score", ylab = "Frequency")
polygon(x,y)
swirl()
myplot(2)
myplot
myplot(2)
myplot(2)
myplot(2)
myplot()
myplot(2)
?myplot
View(myplot)
source(myplot)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
print(g)
}
myplot(2)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(2){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, 2)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
print(g)
}
myplot(2)
View(myplot)
source("tPlot.R")
myplot(2)
0
myplot
0
bye9
bye()
swirl()
myplot(2)
bye()
swirl()
10/sqrt(100)
swirl()
packageurl <- "http://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_1.0.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
swirl()
library(swirl)
swirl()
(32-30)/(10/sqrt(100))
(32-30)/(10/sqrt(16))
15
qt(0.95, 15)
dim(fs)
t.test(fs)
t.test(fs$sheight - fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
5
8
pt(q = 2.5, df = 15, lower.tail = FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(7, size = 8, prob = 0.5, lower.tail = TRUE)
ppois(9, 5, lower.tail = FALSE)
myplot(2)
myplot(20)
myplot2(2)
qt(0.975, df = 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mean(difference) + c(-1, 1)*qt(0.975, df = 19)/sqrt(20)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
x$conf.int
t.test(difference)$conf.int
swirl()
()
sp <- 7*15.34^2 + 20 * 18.23^2
27
8+21-2
ns <- 8+21-2
sp <- sqrt(sp/ns)
mean(difference) + c(-1, 1)*qt(0.975, df = 27)*
d
mean(difference) + c(-1, 1)*qt(0.975, df = 27)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt(var(g1))
sp <- sqrt((9*var(g1)+9*var(g2))/18)
mean(difference) + c(-1, 1)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(difference)$conf
t.test(g1, g2, paired = FALSe, var.equal = TRUE)$conf
t.test(g1, g2, paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=FALSE)$conf
t.test(g2,g1,paired=TRUE)$conf
(15.34^2/8 + 18.23^2/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
c(-1,1 )
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1100 + c(-1, 1)*pt(0.975, 8)*30/sqrt(9)
pt(0.975, 8)
1100 + c(-1, 1)*qt(0.975, 8)*30/sqrt(9)
qt(0.975, 8)
n_new = n_old = 10
med_avg_new= 3
med_avg_old = 5
med_var_new = .6
med_var_old = .68
med_avg_between = med_avg_new - med_avg_old
df = ((med_var_new / n_new + med_var_old / n_old)^2) /
((med_var_new/n_new)^2/(n_new-1) + (med_var_old/n_old)^2/(n_old-1))
t = qt(p=.975,df=df)
med_avg_between + c(-1,1)*sqrt(med_var_new/n_new + med_var_old/n_old)*t
n_new = n_old = 100
med_avg_new= 4
med_avg_old = 6
med_var_new = .5^2
med_var_old = 2^2
med_avg_between = med_avg_new - med_avg_old
df = ((med_var_new / n_new + med_var_old / n_old)^2) /
((med_var_new/n_new)^2/(n_new-1) + (med_var_old/n_old)^2/(n_old-1))
t = qt(p=.975,df=df)
-med_avg_between + c(-1,1)*sqrt(med_var_new/n_new + med_var_old/n_old)*t
n_new = n_old = 9
med_avg_new= -3
med_avg_old = 1
med_var_new = 1.5^2
med_var_old = 1.8^2
t_confident_interval = .9
tp = (1-t_confident_interval)/2 + t_confident_interval
med_avg_between = med_avg_new - med_avg_old
df = ((med_var_new / n_new + med_var_old / n_old)^2) /
((med_var_new/n_new)^2/(n_new-1) + (med_var_old/n_old)^2/(n_old-1))
t = qt(p=tp,df=df)
med_avg_between + c(-1,1)*sqrt(med_var_new/n_new + med_var_old/n_old)*t
x <- c(3,1,4,3,3,4)
hist(x)
hist(x, breaks = 4)
hist(x, breaks = 6)
hist(x, breaks = 5)
barplot(x)
abline(x=3)
abline(v=3)
hist(x, breaks = 6)
abline(v=3)
abline(v=3, col = "red")
abline(v=3, col = "red", lwd = 4)
hist(x, breaks = 5, col = "grey")
abline(v=3, col = "red", lwd = 4)
abline(v=3, col = "red", lwd = 7)
x <- c(3,1,4,3,3,4)
hist(x, col = "grey", breaks = 3)
abline(v =3, col = "red", lwd = 5)
abline(v =3, col = "red", lwd = 8)
setwd("D:/RStudio/reproducible analysis/project2")
knitr::knit2pdf("storm.Rmd", "storm.pdf")
render("storm.Rmd", "pdf_document")
library(rmarkdown)
render("storm.Rmd", "pdf_document")
